<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on rebased</title>
		<link>https://blog.rebased.dev/posts/</link>
		<description>Recent content in Posts on rebased</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Fri, 03 May 2019 19:18:44 +0200</lastBuildDate>
		<atom:link href="https://blog.rebased.dev/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Simple Recurring Jobs in Phoenix Apps</title>
			<link>https://blog.rebased.dev/posts/phoenix-recurring-job/</link>
			<pubDate>Fri, 03 May 2019 19:18:44 +0200</pubDate>
			
			<guid>https://blog.rebased.dev/posts/phoenix-recurring-job/</guid>
			<description>There is often a need to do some work repeatedly in any non-trivial application. Maybe send a daily report or purge unused resources. Let&amp;rsquo;s see how we can do that in a Phoenix app.
It&amp;rsquo;s all Erlang underneath It is pretty straightforward to do recurring jobs due to Elixir being a language that targets Erlang VM and therefore has access to lightweight concurrency with supervisors and child processes. In fact, let&amp;rsquo;s check the application.</description>
			<content type="html"><![CDATA[

<p>There is often a need to do some work repeatedly in any non-trivial application. Maybe send a daily report or purge unused resources. Let&rsquo;s see how we can do that in a Phoenix app.</p>

<h2 id="it-s-all-erlang-underneath">It&rsquo;s all Erlang underneath</h2>

<p>It is pretty straightforward to do recurring jobs due to Elixir being a language that targets Erlang VM and therefore has access to lightweight concurrency with  <a href="https://hexdocs.pm/elixir/Supervisor.html" target="_blank">supervisors</a> and child processes. In fact, let&rsquo;s check the <code>application.ex</code> file in a typical Phoenix app. This file is auto-generated when bootstrapping a new Pheonix app with <code>mix phx.new</code> command and is responsible for starting the app:</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir"><span class="n">defmodule</span> <span class="nc">DemoApp.Application</span> <span class="n">do</span>
  <span class="n">use</span> <span class="nc">Application</span>

  <span class="n">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="n">do</span>
    <span class="n">children</span> <span class="o">=</span> <span class="p">[</span>
      <span class="nc">DemoApp.Repo</span>
    <span class="p">]</span>

    <span class="nc">Supervisor</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span>
      <span class="n">children</span><span class="p">,</span>
      <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span>
      <span class="ss">name</span><span class="p">:</span> <span class="nc">DemoApp.Supervisor</span>
    <span class="p">)</span>
  <span class="n">end</span>
<span class="n">end</span></code></pre></div>
<p>Ok, so our DemoApp creates a supervisor that starts child processes. In this example it&rsquo;s just one child, but there&rsquo;s nothing keeping us from having more. And that&rsquo;s exactly what we&rsquo;ll do to run custom jobs.</p>

<p>Just a short note on supervisor strategies. A supervisor strategy instructs supervisor what to do when a child process dies. The one used in the example, <code>:one_for_one</code>, means that if a child process terminates, then that process is restarted. There are other strategies as well, like killing all children if one dies or doing nothing and so on, but for our use case <code>:one_for_one</code> is exactly what we want.</p>

<h2 id="simple-job">Simple job</h2>

<p>Let&rsquo;s do following:</p>

<ol>
<li>Implement our job as child process</li>
<li>Schedule the work one minute after initialization.</li>
<li>After work is done, schedule it again.</li>
</ol>

<p>Once we have our job, we just have to pass it to <code>children</code> list for the supervisor. Building upon the <a href="https://hexdocs.pm/elixir/Supervisor.html#module-examples" target="_blank">example</a> in Elixir docs our job could look like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir"><span class="n">defmodule</span> <span class="nc">DemoApp.Job</span> <span class="n">do</span>
  <span class="n">use</span> <span class="nc">GenServer</span>

  <span class="n">def</span> <span class="n">start_link</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="n">do</span>
    <span class="nc">GenServer</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">__MODULE__</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="n">__MODULE__</span><span class="p">)</span>
  <span class="n">end</span>

  <span class="n">def</span> <span class="n">init</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="n">do</span>
    <span class="n">schedule</span><span class="p">()</span>
    
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">state</span><span class="p">}</span>
  <span class="n">end</span>

  <span class="n">def</span> <span class="n">handle_info</span><span class="p">(</span><span class="ss">:work</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span> <span class="n">do</span>
    <span class="c1"># the actual work to be done</span>
    <span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="s2">&#34;Running job ...&#34;</span><span class="p">)</span>
    
    <span class="c1"># work is done, let&#39;s schedule again</span>
    <span class="n">schedule</span><span class="p">()</span>
    
    <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">state</span><span class="p">}</span>
  <span class="n">end</span>
  
  <span class="n">defp</span> <span class="n">schedule</span><span class="p">()</span> <span class="n">do</span>
    <span class="c1"># schedule after one minute</span>
    <span class="nc">Process</span><span class="o">.</span><span class="n">send_after</span><span class="p">(</span><span class="n">self</span><span class="p">(),</span> <span class="ss">:work</span><span class="p">,</span> <span class="mi">60000</span><span class="p">)</span>
  <span class="n">end</span>

<span class="n">end</span></code></pre></div>
<p>In essence, our Job is a process that waits for <code>:work</code> message to do its work. What we want is that <code>:work</code> message arrives once per 60 seconds and this is done in two steps:</p>

<ol>
<li>By calling <code>schedule/0</code> function during initialization.</li>
<li>And by calling <code>schedule/0</code> every time after work is done.</li>
</ol>

<p>You may be thinking, &ldquo;This won&rsquo;t work properly. What if there&rsquo;s an error in <code>handle_info/2</code> function? We should catch it, otherwise the job won&rsquo;t be re-scheduled.&ldquo;. But that&rsquo;s in fact not necessary, because the supervisor will take care of restarting a failed child process. This keeps the code simple and is one of the benefits we get from Erlang&rsquo;s concurrency.</p>

<p>Now that we have the Job implementation, we have to make sure it&rsquo;s started when the app starts:</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir"><span class="n">defmodule</span> <span class="nc">DemoApp.Application</span> <span class="n">do</span>
  <span class="n">use</span> <span class="nc">Application</span>

  <span class="n">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="n">do</span>
    <span class="n">children</span> <span class="o">=</span> <span class="p">[</span>
      <span class="nc">DemoApp.Repo</span><span class="p">,</span>
      <span class="nc">DemoApp.Job</span>
    <span class="p">]</span>

    <span class="nc">Supervisor</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span>
      <span class="n">children</span><span class="p">,</span>
      <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span>
      <span class="ss">name</span><span class="p">:</span> <span class="nc">DemoApp.Supervisor</span>
    <span class="p">)</span>
  <span class="n">end</span>
<span class="n">end</span></code></pre></div>
<p>That&rsquo;s right, it&rsquo;s just one line added to the children array.</p>

<h2 id="wait-it-s-not-that-simple">Wait, it&rsquo;s not that simple</h2>

<p>It really is, but only in case your jobs don&rsquo;t require complex fallback logic. For example, it may not be desired that a job is just re-run if it fails or you&rsquo;d want that it&rsquo;s only retried couple of times before giving up. If that&rsquo;s the case, then you may want to look into third party dependencies such as <a href="https://hexdocs.pm/quantum/readme.html" target="_blank">Quantum</a> or <a href="https://github.com/edgurgel/verk" target="_blank">Verk</a>. Or implement this behaviour yourself, but be ready for a rabbit hole of job scheduling.</p>

<h2 id="code-reuse">Code reuse</h2>

<p>If you have many different jobs (well, more than one), then it&rsquo;s annoying to copy all that boilerplate for every job implementation. Ideally, the only two things we&rsquo;d want in a job is the time interval and the code to do the work. We can achieve this using Elixir <a href="https://elixir-lang.org/getting-started/meta/macros.html" target="_blank">macros</a>. Here&rsquo;s how such a job could look like:</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir"><span class="n">defmodule</span> <span class="nc">DemoApp.DemoJob</span> <span class="n">do</span>
  <span class="n">use</span> <span class="nc">DemoApp.Job</span>

  <span class="c1"># every 10 minutes</span>
  <span class="na">@job_interval</span> <span class="mi">600</span>

  <span class="n">def</span> <span class="n">get_interval</span><span class="p">(),</span> <span class="ss">do</span><span class="p">:</span> <span class="na">@job_interval</span>

  <span class="n">def</span> <span class="n">work</span><span class="p">()</span> <span class="n">do</span>
    <span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="s2">&#34;DemoJob working ...&#34;</span><span class="p">)</span>
  <span class="n">end</span>
<span class="n">end</span></code></pre></div>
<p>The <code>use DemoApp.Job</code> line means that the DemoJob will use <code>Job</code> macro, which is composed mostly of the boilerplate we&rsquo;ve seen in the &lsquo;Simple job&rsquo; section:</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir"><span class="n">defmodule</span> <span class="nc">DemoApp.Job</span> <span class="n">do</span>
  <span class="na">@callback</span> <span class="n">work</span><span class="p">()</span> <span class="o">::</span> <span class="n">any</span>
  <span class="na">@callback</span> <span class="n">get_interval</span><span class="p">()</span> <span class="o">::</span> <span class="nc">Integer</span><span class="o">.</span><span class="n">t</span><span class="p">()</span>

  <span class="n">defmacro</span> <span class="n">__using__</span><span class="p">(</span><span class="n">_params</span><span class="p">)</span> <span class="n">do</span>
    <span class="n">quote</span> <span class="n">do</span>
      <span class="na">@behaviour</span> <span class="nc">DemoApp.Job</span>

      <span class="n">use</span> <span class="nc">GenServer</span>

      <span class="n">def</span> <span class="n">start_link</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="n">do</span>
        <span class="nc">GenServer</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">__MODULE__</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="n">__MODULE__</span><span class="p">)</span>
      <span class="n">end</span>

      <span class="n">def</span> <span class="n">init</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="n">do</span>
        <span class="n">schedule</span><span class="p">()</span>

        <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">state</span><span class="p">}</span>
      <span class="n">end</span>

      <span class="n">def</span> <span class="n">handle_info</span><span class="p">(</span><span class="ss">:work</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span> <span class="n">do</span>
        <span class="n">work</span><span class="p">()</span>

        <span class="n">schedule</span><span class="p">()</span>

        <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">state</span><span class="p">}</span>
      <span class="n">end</span>

      <span class="n">defp</span> <span class="n">schedule</span><span class="p">()</span> <span class="n">do</span>
        <span class="nc">Process</span><span class="o">.</span><span class="n">send_after</span><span class="p">(</span><span class="n">self</span><span class="p">(),</span> <span class="ss">:work</span><span class="p">,</span> <span class="n">get_interval</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
      <span class="n">end</span>
    <span class="n">end</span>
  <span class="n">end</span>
<span class="n">end</span></code></pre></div>
<p>The <code>DemoApp.Job</code> module specifies two things:</p>

<ol>
<li>The <a href="https://elixir-lang.org/getting-started/typespecs-and-behaviours.html#behaviours" target="_blank">behaviour</a> with two callbacks. Behaviours are essentially the same as interfaces in some other languages, which means that other modules using this module will have to implement <code>work/0</code> and <code>get_interval/0</code> functions.</li>
<li>The macro with the job boilerplate code. You can think of macros as text blocks that are copied verbatim to every module using the macro.</li>
</ol>

<p>Now any job implementation that uses <code>DemoApp.Job</code> module will be much shorter and in case we have to make changes to boilerplate code, we only have to do it in one place.</p>
]]></content>
		</item>
		
		<item>
			<title>Custom Session Store in Phoenix App</title>
			<link>https://blog.rebased.dev/posts/phoenix-custom-session-store/</link>
			<pubDate>Fri, 05 Apr 2019 19:56:59 +0200</pubDate>
			
			<guid>https://blog.rebased.dev/posts/phoenix-custom-session-store/</guid>
			<description>In this post I&amp;rsquo;ll show you how to build a custom session store in a Phoenix-based app. It&amp;rsquo;s super easy!
The Phoenix framework is one of the most popular web frameworks in Elixir community. In fact, I and many other developers have been introduced to Elixir through a Phoenix app. One of the great things about Phoenix is that it&amp;rsquo;s not opinionated framework - it provides sensible defaults, but may be changed or extended easily.</description>
			<content type="html"><![CDATA[

<p>In this post I&rsquo;ll show you how to build a custom session store in a Phoenix-based app. It&rsquo;s super easy!</p>

<p>The <a href="https://github.com/phoenixframework/phoenix" target="_blank">Phoenix framework</a> is one of the most popular web frameworks in Elixir community. In fact, I and many other developers have been introduced to Elixir through a Phoenix app. One of the great things about Phoenix is that it&rsquo;s not opinionated framework - it provides sensible defaults, but may be changed or extended easily. This applies to session storage as well.</p>

<p>Phoenix uses <a href="https://hexdocs.pm/plug/Plug.Session.html" target="_blank">Plug.Session</a> to handle http sessions. A plug is a function that receives a connection, does its thing and then returns a connection. You can think of it as middleware. The session plug provides two strategies for saving session state:</p>

<ol>
<li><code>Plug.Session.ETS</code>: session state is stored in an in-memory <a href="https://elixir-lang.org/getting-started/mix-otp/ets.html" target="_blank">ETS table</a>.</li>
<li><code>Plug.Session.COOKIE</code>: session state is stored within the cookie itself (cookie is encrypted, of course).</li>
</ol>

<p>These two strategies are totally fine for certain types of apps, but may not be the right choice for your app. Maybe you don&rsquo;t want session state to propagate to users&rsquo; browsers or have a distributed deployment where different app instances should be able to recognize user&rsquo;s session cookie. Whatever the reason may be, you can tell Phoenix to use custom session store when initializing <code>Plug.Session</code> middleware.</p>

<p>Just a note before we dive into implementation. The session &lsquo;store&rsquo; is a bit of misnomer. It won&rsquo;t actually store anything, but act more like a glue between Phoenix and a real backing store. Backing store may be a Postgres database, Redis or Mongo, for example.</p>

<h2 id="step-one-implementation">Step one: implementation</h2>

<p>Let&rsquo;s start by creating a new module that will be our custom store. We need to:</p>

<ol>
<li>Use <code>@behaviour Plug.Session.Store</code> to tell that the module can be used as session store. <code>Plug.Session</code> will then call our store as needed (login, logout, etc.).</li>
<li>Implement four functions:

<ol>
<li><code>init/1</code> - do any needed initialization. The returned <code>opts</code> are later passed to following three functions.</li>
<li><code>get/3</code> - fetch session data.</li>
<li><code>put/4</code> - save (new) session.</li>
<li><code>delete/3</code> - remove invalidated session.</li>
</ol></li>
</ol>

<p>In our example, we&rsquo;ll assume that sessions will be stored in a Postgres database that has a table named <code>sessions</code> and our app already has an api and schema to read and write to the database. Further, we want our sessions to be valid for certain amount of time and after that become invalid. For example, this could be the Ecto schema for sessions:</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir">  <span class="n">schema</span> <span class="s2">&#34;sessions&#34;</span> <span class="n">do</span>
    <span class="n">field</span><span class="p">(</span><span class="ss">:session_cookie</span><span class="p">,</span> <span class="ss">:string</span><span class="p">)</span>
    <span class="n">field</span><span class="p">(</span><span class="ss">:valid_from</span><span class="p">,</span> <span class="ss">:utc_datetime</span><span class="p">)</span>
    <span class="n">field</span><span class="p">(</span><span class="ss">:valid_to</span><span class="p">,</span> <span class="ss">:utc_datetime</span><span class="p">)</span>

    <span class="n">belongs_to</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="nc">MyApp.Domain.User</span><span class="p">)</span>
  <span class="n">end</span></code></pre></div>
<p>Very basic structure as it only contains fields for cookie and validity interval.</p>

<p>Alright, let&rsquo;s start. Create a new file somewhere in app&rsquo;s lib directory structure. In this case, I&rsquo;d put it right next to <code>endpoint.ex</code> in <code>lib/myapp</code> (or <code>apps/myapp_web/lib/myapp_web</code> in an umbrella project). Let&rsquo;s start with <code>init/1</code> and <code>get/3</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir"><span class="n">defmodule</span> <span class="nc">MyApp.SessionStore</span> <span class="n">do</span>
  <span class="na">@moduledoc</span> <span class="sh">&#34;&#34;&#34;
</span><span class="sh">  Session store that uses Postgres as backing storage.
</span><span class="sh">  &#34;&#34;&#34;</span>
  
  <span class="na">@behaviour</span> <span class="nc">Plug.Session.Store</span>

  <span class="n">alias</span> <span class="nc">MyApp.Api.Sessions</span>
  <span class="n">alias</span> <span class="nc">MyApp.Domain.Session</span>

  <span class="n">def</span> <span class="n">init</span><span class="p">(</span><span class="n">opts</span><span class="p">)</span> <span class="n">do</span>
    <span class="c1"># By default, sessions will be valid for 1 hour</span>
    <span class="n">max_age</span> <span class="o">=</span> <span class="nc">Keyword</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="ss">:store_max_age</span><span class="p">,</span> <span class="mi">3600</span><span class="p">)</span>

    <span class="p">%{</span><span class="ss">max_age</span><span class="p">:</span> <span class="n">max_age</span><span class="p">}</span>
  <span class="n">end</span>

  <span class="n">def</span> <span class="n">get</span><span class="p">(</span><span class="n">_conn</span><span class="p">,</span> <span class="n">cookie</span><span class="p">,</span> <span class="n">_opts</span><span class="p">)</span>
      <span class="n">when</span> <span class="n">cookie</span> <span class="o">==</span> <span class="s2">&#34;&#34;</span>
      <span class="n">when</span> <span class="n">cookie</span> <span class="o">==</span> <span class="n">nil</span> <span class="n">do</span>
    <span class="p">{</span><span class="n">nil</span><span class="p">,</span> <span class="p">%{}}</span>
  <span class="n">end</span>
  
  <span class="n">def</span> <span class="n">get</span><span class="p">(</span><span class="n">_conn</span><span class="p">,</span> <span class="n">cookie</span><span class="p">,</span> <span class="n">_opts</span><span class="p">)</span> <span class="n">do</span>
    <span class="n">session</span> <span class="o">=</span> <span class="nc">Sessions</span><span class="o">.</span><span class="n">get_by_session_cookie</span><span class="p">(</span><span class="n">cookie</span><span class="p">)</span>
    <span class="n">get_for_session</span><span class="p">(</span><span class="n">cookie</span><span class="p">,</span> <span class="n">session</span><span class="p">)</span>
  <span class="n">end</span>

  <span class="n">defp</span> <span class="n">get_for_session</span><span class="p">(</span><span class="n">_cookie</span><span class="p">,</span> <span class="n">nil</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="p">{</span><span class="n">nil</span><span class="p">,</span> <span class="p">%{}}</span>

  <span class="n">defp</span> <span class="n">get_for_session</span><span class="p">(</span><span class="n">cookie</span><span class="p">,</span> <span class="p">%</span><span class="nc">Session</span><span class="p">{</span><span class="ss">user_id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">,</span> <span class="ss">valid_to</span><span class="p">:</span> <span class="n">valid_to</span><span class="p">})</span> <span class="n">do</span>
    <span class="n">now</span> <span class="o">=</span> <span class="nc">DateTime</span><span class="o">.</span><span class="n">utc_now</span><span class="p">()</span>

    <span class="n">if</span> <span class="nc">DateTime</span><span class="o">.</span><span class="n">compare</span><span class="p">(</span><span class="n">now</span><span class="p">,</span> <span class="n">valid_to</span><span class="p">)</span> <span class="o">==</span> <span class="ss">:lt</span> <span class="n">do</span>
      <span class="p">{</span><span class="n">cookie</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&#34;user_id&#34;</span> <span class="o">=&gt;</span> <span class="n">id</span><span class="p">}}</span>
    <span class="n">else</span>
      <span class="p">{</span><span class="n">nil</span><span class="p">,</span> <span class="p">%{}}</span>
    <span class="n">end</span>
  <span class="n">end</span>
  
  <span class="c1"># continued below ...</span>
<span class="n">end</span></code></pre></div>
<p>The <code>init/1</code> function is passed the <code>Plug.Session</code> configuration params, which we check for <code>store_max_age</code> or default to 1 hour if param wasn&rsquo;t set.</p>

<p>The <code>get/3</code> is more insteresting. First, we pattern match on empty cookie and in that case return empty values as well. Otherwise, we try to load the session using that cookie. If the session is found, then we check if it&rsquo;s still valid.</p>

<p>Next on, the <code>put/4</code> function:</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir">  <span class="n">def</span> <span class="n">put</span><span class="p">(</span><span class="n">_conn</span><span class="p">,</span> <span class="n">cookie</span><span class="p">,</span> <span class="n">term</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span> <span class="n">do</span>
    <span class="n">user_id</span> <span class="o">=</span> <span class="n">term</span><span class="p">[</span><span class="s2">&#34;user_id&#34;</span><span class="p">]</span>

    <span class="n">if</span> <span class="n">cookie</span> <span class="o">==</span> <span class="n">nil</span> <span class="n">and</span> <span class="n">user_id</span> <span class="o">!=</span> <span class="n">nil</span> <span class="n">do</span>
      <span class="p">%{</span><span class="ss">max_age</span><span class="p">:</span> <span class="n">max_age</span><span class="p">}</span> <span class="o">=</span> <span class="n">opts</span>

      <span class="n">valid_from</span> <span class="o">=</span> <span class="nc">DateTime</span><span class="o">.</span><span class="n">utc_now</span><span class="p">()</span>
      <span class="n">valid_to</span> <span class="o">=</span> <span class="nc">DateTime</span><span class="o">.</span><span class="n">from_unix!</span><span class="p">(</span><span class="nc">DateTime</span><span class="o">.</span><span class="n">to_unix</span><span class="p">(</span><span class="n">valid_from</span><span class="p">)</span> <span class="o">+</span> <span class="n">max_age</span><span class="p">)</span>

      <span class="n">new_cookie</span> <span class="o">=</span> <span class="ss">:crypto</span><span class="o">.</span><span class="n">strong_rand_bytes</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="nc">Base</span><span class="o">.</span><span class="n">encode64</span><span class="p">()</span>

      <span class="nc">Sessions</span><span class="o">.</span><span class="n">create!</span><span class="p">(%{</span>
        <span class="ss">session_cookie</span><span class="p">:</span> <span class="n">new_cookie</span><span class="p">,</span>
        <span class="ss">valid_from</span><span class="p">:</span> <span class="n">valid_from</span><span class="p">,</span>
        <span class="ss">valid_to</span><span class="p">:</span> <span class="n">valid_to</span><span class="p">,</span>
        <span class="ss">user_id</span><span class="p">:</span> <span class="n">user_id</span>
      <span class="p">})</span>

      <span class="n">session_cookie</span>
    <span class="n">else</span>
      <span class="n">cookie</span>
    <span class="n">end</span>
  <span class="n">end</span></code></pre></div>
<p>In <code>put/4</code>, we&rsquo;ll only create new session if there isn&rsquo;t already a session cookie and if the user is known. Otherwise, we just return the input <code>cookie</code>.</p>

<p>The <code>delete/3</code> is only couple of lines:</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir">  <span class="n">def</span> <span class="n">delete</span><span class="p">(</span><span class="n">_conn</span><span class="p">,</span> <span class="n">cookie</span><span class="p">,</span> <span class="n">_opts</span><span class="p">)</span>
      <span class="n">when</span> <span class="n">cookie</span> <span class="o">==</span> <span class="s2">&#34;&#34;</span>
      <span class="n">when</span> <span class="n">cookie</span> <span class="o">==</span> <span class="n">nil</span> <span class="n">do</span>
    <span class="ss">:ok</span>
  <span class="n">end</span>

  <span class="n">def</span> <span class="n">delete</span><span class="p">(</span><span class="n">_conn</span><span class="p">,</span> <span class="n">cookie</span><span class="p">,</span> <span class="n">_opts</span><span class="p">)</span> <span class="n">do</span>
    <span class="nc">Sessions</span><span class="o">.</span><span class="n">delete_by_session_cookie</span><span class="p">(</span><span class="n">sid</span><span class="p">)</span>
    <span class="ss">:ok</span>
  <span class="n">end</span></code></pre></div>
<p>We apply similar pattern as we did with <code>get/3</code>.</p>

<p>And that&rsquo;s all there is to it! The heavy work is done by <code>Plug.Session</code> and <code>MyApp.Api.Sessions</code>. In essence, our custom store is just a way to bind the session plug with database.</p>

<h2 id="step-two-configuration">Step two: configuration</h2>

<p>We need to update <code>endpoint.ex</code>, because that&rsquo;s where the session plug is configured. We&rsquo;ll tell it to use our custom store and set the max age to 1 day:</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir"><span class="c1"># ...</span>

<span class="n">max_age</span> <span class="o">=</span> <span class="mi">86_400</span>

<span class="n">plug</span> <span class="nc">Plug.Session</span><span class="p">,</span>
  <span class="ss">store</span><span class="p">:</span> <span class="nc">MyApp.SessionStore</span><span class="p">,</span>
  <span class="ss">key</span><span class="p">:</span> <span class="s2">&#34;_myapp_sid&#34;</span><span class="p">,</span>
  <span class="ss">max_age</span><span class="p">:</span> <span class="n">max_age</span><span class="p">,</span>
  <span class="ss">store_max_age</span><span class="p">:</span> <span class="n">max_age</span>
  
<span class="c1"># ...</span></code></pre></div>
<p>The <code>key</code> config param is used to name the cookie in response headers (and subsequently in browser), for example:</p>

<pre><code>set-cookie: _myapp_sid=bZsiztY6G+7UHr5BWMpWLVpUnr3paDTktFU/S1Jh5B1COqhaEyWaOuunrvJ/D8FvcMQzl1nw/z+1blhhtlFgAQ==; path=/; expires=Sun, 7 Apr 2019 11:28:31 GMT; max-age=86400; HttpOnly
</code></pre>

<p>Then there are two config params for max age. <code>max_age</code> is used internally by session plug and is unfortunately not exposed in options passed to the store. Therefore, we&rsquo;ve defined another config param, which won&rsquo;t be &lsquo;eaten&rsquo; by session plug.</p>

<h2 id="that-s-all-folks">That&rsquo;s all folks</h2>

<p>As you can see, it&rsquo;s very easy to implement a custom session store in Phoenix app. And for me personally, this is one of the best things about the framework: it&rsquo;s easy to extend it and the result is most of the time less than 100 lines of code.</p>
]]></content>
		</item>
		
		<item>
			<title>Preloading data for React components</title>
			<link>https://blog.rebased.dev/posts/react-preload-data/</link>
			<pubDate>Tue, 12 Mar 2019 22:21:59 +0100</pubDate>
			
			<guid>https://blog.rebased.dev/posts/react-preload-data/</guid>
			<description>For every non-trivial web application there is a need to preload some data before rendering the content. For example, to display a list of users we need to fetch it first from the server. React web applications are no exception, so let&amp;rsquo;s take a look how we can preload some data in React components.
React documentation I always check the documentation first when exploring how to do something with React.</description>
			<content type="html"><![CDATA[

<p>For every non-trivial web application there is a need to preload some data before rendering the content. For example, to display a list of users we need to fetch it first from the server. React web applications are no exception, so let&rsquo;s take a look how we can preload some data in React components.</p>

<h2 id="react-documentation">React documentation</h2>

<p>I always check the documentation first when exploring how to do something with React. There are hints and recommendations on how to do (or not do) things in React applications. Sure enough, there&rsquo;s a <a href="https://reactjs.org/docs/faq-ajax.html" target="_blank">section</a> about fetching data from APIs. The recommended way is to use <code>componentDidMount()</code> lifecycle method:</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="k">class</span> <span class="nx">MyComponent</span> <span class="k">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
      <span class="c1">// some state
</span><span class="c1"></span>    <span class="p">};</span>
  <span class="p">}</span>

  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fetch</span><span class="p">(</span><span class="s2">&#34;https://api.example.com/items&#34;</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="p">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span>
        <span class="c1">// update the state with results
</span><span class="c1"></span>      <span class="p">);</span>
  <span class="p">}</span>
  
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// render the component using data from state
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>This works as expected: data is fetched and then rendered. The problem with this solution is that our component contains data loading logic that is coupled to a lifecycle method. This means it&rsquo;s harder to test and reuse the component. Ideally, we&rsquo;d want to move this logic out and instead inject <code>items</code> array as a property into this component. That way, we can easily test it and use it in Storybook, for example.</p>

<h2 id="wrapper-component">Wrapper component</h2>

<p>To solve this tight coupling, one may instead move the fetching logic into a wrapper component. This means that we can define a separate component that just does the fetching, then renders <code>MyComponent</code> with <code>items</code> prop.</p>
<div class="highlight"><pre class="chroma"><code class="language-jsx" data-lang="jsx"><span class="k">class</span> <span class="nx">MyComponent</span> <span class="k">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">const</span> <span class="p">{</span> <span class="nx">items</span><span class="p">,</span> <span class="nx">itemsLoaded</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">itemsLoaded</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="c1">// render items
</span><span class="c1"></span>      <span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="p">(</span>
      <span class="c1">// render loading indicator
</span><span class="c1"></span>    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nx">Wrapper</span> <span class="k">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">items</span><span class="o">:</span> <span class="p">[],</span>
      <span class="nx">itemsLoaded</span><span class="o">:</span> <span class="kc">false</span>
    <span class="p">};</span>
  <span class="p">}</span>
  
  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fetch</span><span class="p">(</span><span class="s2">&#34;https://api.example.com/items&#34;</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="p">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
          <span class="nx">items</span><span class="o">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span>
          <span class="nx">itemsLoaded</span><span class="o">:</span> <span class="kc">true</span>
        <span class="p">});</span>
      <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">const</span> <span class="p">{</span> <span class="nx">items</span><span class="p">,</span> <span class="nx">itemsLoaded</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">MyComponent</span>
        <span class="na">items</span><span class="o">=</span><span class="s">{items}</span>
        <span class="na">itemsLoaded</span><span class="o">=</span><span class="s">{itemsLoaded}</span>
        <span class="p">{</span><span class="na">...this.props</span><span class="p">}</span>
      <span class="p">/&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<p>Ok, so now we can use the <code>Wrapper</code> component elsewhere in our app&rsquo;s pages and the inner <code>MyComponent</code> in tests and Storybook. Great! But we&rsquo;re not satisfied yet, because the pattern of preloading data is common for different components and api calls, and it would be tedious to write specific wrapper components for every use-case.</p>

<p>A more generalized version of wrapper component would accept the data fetching function as a property, then invoke it in <code>componentDidMount()</code> and pass the result to the inner component:</p>
<div class="highlight"><pre class="chroma"><code class="language-jsx" data-lang="jsx"><span class="k">class</span> <span class="nx">MyComponent</span> <span class="k">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">dataLoaded</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">dataLoaded</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="c1">// render items
</span><span class="c1"></span>      <span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="p">(</span>
      <span class="c1">// render loading indicator
</span><span class="c1"></span>    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nx">Wrapper</span> <span class="k">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">data</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
      <span class="nx">dataLoaded</span><span class="o">:</span> <span class="kc">false</span>
    <span class="p">};</span>
  <span class="p">}</span>
  
  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">preload</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
          <span class="nx">data</span><span class="p">,</span>
          <span class="nx">dataLoaded</span><span class="o">:</span> <span class="kc">true</span>
        <span class="p">});</span>
      <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">const</span> <span class="p">{</span> <span class="nx">component</span><span class="o">:</span> <span class="nx">Component</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
    <span class="k">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">dataLoaded</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">Component</span>
        <span class="na">data</span><span class="o">=</span><span class="s">{data}</span>
        <span class="na">dataLoaded</span><span class="o">=</span><span class="s">{dataLoaded}</span>
        <span class="p">{</span><span class="na">...this.props</span><span class="p">}</span>
      <span class="p">/&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ... used elsewhere in the app as:
</span><span class="c1"></span><span class="k">class</span> <span class="nx">MyPage</span> <span class="k">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">Wrapper</span> <span class="na">component</span><span class="o">=</span><span class="s">{MyComponent}</span> <span class="na">preload</span><span class="o">=</span><span class="s">{actions.fetchItems}</span> <span class="p">/&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<p>This generalized version looks like a good and reusable solution. However, it&rsquo;s still a bit ugly and it&rsquo;s annoying that <code>MyPage</code> has to be aware of preloading boilerplate. Wouldn&rsquo;t it be nice if we could encapsulate that within <code>MyComponent</code>?</p>

<h2 id="higher-order-component">Higher-Order component</h2>

<p>We can reach for another technique that is frequently used in React apps and that&rsquo;s higher-order components. As React documentation <a href="https://reactjs.org/docs/higher-order-components.html" target="_blank">explains</a>, a higher-order component is a function that takes a component and returns a new component. The idea is that instead of having a wrapper component, we define a higher-order component for prefetching and then wrap <code>MyComponent</code> with <code>prefetch()</code> function. This is what we want to achieve:</p>
<div class="highlight"><pre class="chroma"><code class="language-jsx" data-lang="jsx"><span class="k">class</span> <span class="nx">MyComponent</span> <span class="k">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">dataLoaded</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">dataLoaded</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="c1">// render items
</span><span class="c1"></span>      <span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="p">(</span>
      <span class="c1">// render loading indicator
</span><span class="c1"></span>    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nx">MyComponentWithData</span> <span class="o">=</span> <span class="nx">prefetch</span><span class="p">({</span>
  <span class="nx">onComponentDidMount</span><span class="o">:</span> <span class="nx">actions</span><span class="p">.</span><span class="nx">fetchItems</span>
<span class="p">})(</span><span class="nx">MyComponent</span><span class="p">);</span>

<span class="c1">// ... used elsewhere in the app as:
</span><span class="c1"></span><span class="k">class</span> <span class="nx">MyPage</span> <span class="k">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">MyComponentWithData</span> <span class="p">/&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<p>This is much better. <code>MyPage</code> does not care about intricacies of loading data necessary for <code>MyComponent</code> rendering. The <code>prefetch()</code> function looks quite similar to previous <code>WrapperComponent</code>, except that it takes a function as parameter, which is then executed in <code>componentDidMount()</code> method, and returns a function which in turn returns a React component:</p>
<div class="highlight"><pre class="chroma"><code class="language-jsx" data-lang="jsx"><span class="k">const</span> <span class="nx">prefetch</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">onComponentDidMount</span> <span class="p">})</span> <span class="p">=&gt;</span>
  <span class="nx">WrappedComponent</span> <span class="p">=&gt;</span> <span class="k">class</span> <span class="k">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">data</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
        <span class="nx">dataLoaded</span><span class="o">:</span> <span class="kc">false</span>
      <span class="p">};</span>
    <span class="p">}</span>
  
    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">onComponentDidMount</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="p">=&gt;</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
            <span class="nx">data</span><span class="p">,</span>
            <span class="nx">dataLoaded</span><span class="o">:</span> <span class="kc">true</span>
          <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">const</span> <span class="p">{</span> <span class="nx">component</span><span class="o">:</span> <span class="nx">Component</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
      <span class="k">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">dataLoaded</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    
      <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">WrappedComponent</span>
          <span class="na">data</span><span class="o">=</span><span class="s">{data}</span>
          <span class="na">dataLoaded</span><span class="o">=</span><span class="s">{dataLoaded}</span>
          <span class="p">{</span><span class="na">...this.props</span><span class="p">}</span>
        <span class="p">/&gt;</span>
      <span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span></code></pre></div>
<p>We could generalize the <code>prefetch()</code> function even more: it could take in other lifecycle methods as well (<code>componentDidUpdate()</code>, <code>componentWillReceiveProps()</code>, and so on). The function would become somewhat complex, though, due to state management and wrapped components would have to know exactly what state is passed to them as props. It would be quite brittle design. To solve that I recommend to reach for <a href="https://redux.js.org/" target="_blank">Redux</a>, because then the state management isn&rsquo;t baked into components.</p>

<p>As you might guess, the pattern I described in this post isn&rsquo;t something new. There is also a cool little package called <a href="https://github.com/JamieDixon/react-lifecycle-component" target="_blank">react-lifecycle-component</a>, which you can use to solve prefetching data in generic way. Works great with Redux, too.</p>
]]></content>
		</item>
		
		<item>
			<title>React Native with Typescript</title>
			<link>https://blog.rebased.dev/posts/typescript-react-native/</link>
			<pubDate>Tue, 22 Jan 2019 21:26:10 +0100</pubDate>
			
			<guid>https://blog.rebased.dev/posts/typescript-react-native/</guid>
			<description>In this post I will describe how to setup a simple Typescript project for React Native app with Redux and Thunks. All of these tools are widely used, thouroughly documented, open source and with very active communities, but despite that it may be a challenge to wire them up correctly. Especially if you are just starting with Typescript.
There are three main reasons it can be difficult to set up a React Native project with Typescript:</description>
			<content type="html"><![CDATA[

<p>In this post I will describe how to setup a simple  <a href="https://www.typescriptlang.org/" target="_blank">Typescript</a> project for <a href="https://facebook.github.io/react-native/" target="_blank">React Native</a> app with <a href="https://react-redux.js.org/" target="_blank">Redux</a> and <a href="https://github.com/reduxjs/redux-thunk" target="_blank">Thunks</a>. All of these tools are widely used, thouroughly documented, open source and with very active communities, but despite that it may be a challenge to wire them up correctly. Especially if you are just starting with Typescript.</p>

<p>There are three main reasons it can be difficult to set up a React Native project with Typescript:</p>

<ul>
<li><p>Type definitions for packages often lag behind releases.</p>

<p>Many packages have a separate package for types, which can be (and often is) maintained by different author than the original package. How fast the types package keeps up with the original package varies a lot.</p></li>

<li><p>Typescript&rsquo;s error messages can often be cryptic or just plain misleading, but it gets easier as you get more experienced with Typescript and various typings packages.</p></li>

<li><p>Authors of various typings packages tend to make breaking changes on minor version bumps.</p></li>
</ul>

<p>Therefore, if you struggle with typing errors even though you&rsquo;re following simple redux-related tutorials, you probably can fix them by downgrading a dependency or its type definitions.</p>

<h2 id="start-with-official-guide">Start with official guide</h2>

<blockquote>
<p>Here&rsquo;s the <a href="https://github.com/jangnezda/ReactNativeRedux" target="_blank">Github repo</a> of this project, if you want to jump straight into the code.</p>
</blockquote>

<p>Let&rsquo;s start with the <a href="https://facebook.github.io/react-native/docs/getting-started.html" target="_blank">official guide</a>. Select &lsquo;Building Projects with Native Code&rsquo; tab and install dependencies for the chosen platform (Android and/or iOS). However, stop at &lsquo;Creating a new application&rsquo; section. In that section the recommendation is to run following init command:</p>

<pre><code>react-native init AwesomeProject
</code></pre>

<p>Which is fine in general, but we want to init the new project with Typescript support. Therefore, run following command instead:</p>

<pre><code>react-native init ReactNativeRedux --template typescript
</code></pre>

<p>After the command finishes, go into the newly created project directory and run:</p>

<pre><code>node setup.js
</code></pre>

<p>This will remove unused files and add <code>tsc</code> command. To verify this setup, let&rsquo;s run typescript compiler:</p>

<pre><code>$ yarn tsc
yarn run v1.13.0
$ tsc
✨Done in 2.84s.
</code></pre>

<p>Great, no errors. Now start the emulator and verify that the app builds and runs:</p>

<pre><code>react-native run-android
</code></pre>

<p>I&rsquo;ve done the same and this is how it looks (VS Code + android emulator):</p>

<p><a href="/posts/typescript-react-native/1.png"><img src="/posts/typescript-react-native/1.small.png" alt="React Native Hello World" /></a></p>

<h2 id="dive-into-redux">Dive into redux</h2>

<p>Time to add redux and react-redux:</p>

<pre><code>yarn add redux react-redux
</code></pre>

<p>and type definitions:</p>

<pre><code>yarn add -D @types/react-redux
</code></pre>

<p>We don&rsquo;t need to add a separate @types dependency for redux, because it already includes the types.</p>

<p>Having redux in the project, we can start using it! Let&rsquo;s add a button with <code>onPress</code> event. When user presses the button the app should display current time. What will happen behind the scene:</p>

<ul>
<li>Button press will fire off a redux action.</li>
<li>Action will update redux store.</li>
<li>This will trigger render of App component, which will display current time due to changed state.</li>
</ul>

<p>Sounds simple and hopefully the solution will be simple, too. To begin with, we need to translate the points above into more actionable tasks:</p>

<ol>
<li>Add Redux store with an action and a reducer.</li>
<li>Wire the App component with redux store.</li>
<li>Add a button that fires off our redux action.</li>
</ol>

<p>First, we will create a new file <code>store.ts</code> with our implementation for the store. We need one action, one reducer to update the application state and then the store itself:</p>
<div class="highlight"><pre class="chroma"><code class="language-ts" data-lang="ts"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Reducer</span><span class="p">,</span> <span class="nx">createStore</span><span class="p">,</span> <span class="nx">Store</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;redux&#34;</span><span class="p">;</span>

<span class="kr">export</span> <span class="kr">enum</span> <span class="nx">Actions</span> <span class="p">{</span>
  <span class="nx">GetTime</span> <span class="o">=</span> <span class="s2">&#34;GET_TIME&#34;</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="kr">interface</span> <span class="nx">ApplicationState</span> <span class="p">{</span>
  <span class="nx">currentTime</span>: <span class="kt">Date</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">initialState</span>: <span class="kt">ApplicationState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">currentTime</span>: <span class="kt">null</span>
<span class="p">};</span>

<span class="kr">const</span> <span class="nx">reducer</span>: <span class="kt">Reducer</span><span class="o">&lt;</span><span class="nx">ApplicationState</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">Actions.GetTime</span>:
      <span class="kt">return</span> <span class="p">{</span>
        <span class="nx">currentTime</span>: <span class="kt">new</span> <span class="nb">Date</span><span class="p">()</span>
      <span class="p">};</span>
    <span class="k">default</span><span class="o">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kr">export</span> <span class="k">default</span> <span class="p">()</span><span class="o">:</span> <span class="nx">Store</span><span class="o">&lt;</span><span class="nx">ApplicationState</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">reducer</span><span class="p">);</span></code></pre></div>
<p>There are multiple things going on in this file:</p>

<ul>
<li>First we have an <code>enum</code> to define our action.</li>
<li>Then we define interface <code>ApplicationState</code> that has single property for current time. So, our application will have very minimalistic state. Note the type of current time property is <code>Date | null</code>. If we just had <code>Date</code> as a type, then we couldn&rsquo;t have set the property to null in the <code>initialState</code> variable.</li>
<li>The reducer is your vanilla reducer, except that it&rsquo;s typed, so it must return object of type <code>ApplicationState</code>. We use enum in the switch statement - we can do that, because redux&rsquo;s action types are just strings, the same as our enum values.</li>
<li>Finally, we export the function to create our store. It just calls <code>createStore()</code> function from redux, but notice again that it&rsquo;s typed. This means, for example, that the dispatch functions will be typed as well (as we&rsquo;ll see later in the App component).</li>
</ul>

<p>In a real world app you&rsquo;ll want to split actions and  reducers into separate modules. Maybe center them around screens and features.</p>

<p>Now that we&rsquo;ve implemented a minimal redux store, it&rsquo;s time to go to our main App component. Open <code>App.tsx</code> and see that the generated source is quite simple: <code>App</code> component that renders some text and associated <code>styles</code> object. Our task is to connect the App component to redux store and extend the <code>render()</code> function to include a button. Let&rsquo;s go step by step:</p>

<ol>
<li><p>The <code>Props</code> interface is empty. We need to add two properties, one for current time and one to trigger &lsquo;GetTime&rsquo; action. We could just add both to the <code>Props</code> interface, however it&rsquo;s better to split the interface into two, one holding regular props, the other just the props to trigger actions:</p>
<div class="highlight"><pre class="chroma"><code class="language-ts" data-lang="ts"><span class="kr">interface</span> <span class="nx">StateProps</span> <span class="p">{</span>
  <span class="nx">currentTime</span>: <span class="kt">Date</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">DispatchProps</span> <span class="p">{</span>
  <span class="nx">getTime</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>
    
<span class="nx">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="nx">StateProps</span> <span class="o">&amp;</span> <span class="nx">DispatchProps</span><span class="p">;</span></code></pre></div></li>

<li><p>The <code>render()</code> function needs to have a button and should also display current time if it&rsquo;s available:</p>
<div class="highlight"><pre class="chroma"><code class="language-jsx" data-lang="jsx"><span class="k">class</span> <span class="nx">App</span> <span class="k">extends</span> <span class="nx">Component</span><span class="p">&lt;</span><span class="nt">Props</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">const</span> <span class="p">{</span> <span class="nx">currentTime</span><span class="p">,</span> <span class="nx">getTime</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>

    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">View</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.container}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.welcome}</span><span class="p">&gt;</span><span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">React</span> <span class="nx">Native</span><span class="o">!</span><span class="p">&lt;/</span><span class="nt">Text</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.instructions}</span><span class="p">&gt;</span>
          <span class="nx">To</span> <span class="nx">get</span> <span class="nx">started</span><span class="p">,</span> <span class="nx">edit</span> <span class="nx">App</span><span class="p">.</span><span class="nx">tsx</span>
        <span class="p">&lt;/</span><span class="nt">Text</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.instructions}</span><span class="p">&gt;{</span><span class="nx">instructions</span><span class="p">}&lt;/</span><span class="nt">Text</span><span class="p">&gt;</span>
            
        <span class="p">&lt;</span><span class="nt">TouchableOpacity</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.button}</span> <span class="na">onPress</span><span class="o">=</span><span class="s">{getTime}</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.buttonText}</span><span class="p">&gt;</span><span class="nx">Get</span> <span class="nx">time</span><span class="p">&lt;/</span><span class="nt">Text</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">TouchableOpacity</span><span class="p">&gt;</span>
        <span class="p">{</span><span class="nx">currentTime</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
          <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.welcome}</span><span class="p">&gt;{</span><span class="nx">currentTime</span><span class="p">.</span><span class="nx">toTimeString</span><span class="p">()}&lt;/</span><span class="nt">Text</span><span class="p">&gt;</span>
        <span class="p">)}</span>
      <span class="p">&lt;/</span><span class="nt">View</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></div></li>

<li><p>The next step is crucial in giving the App access to redux store:</p>
<div class="highlight"><pre class="chroma"><code class="language-ts" data-lang="ts"><span class="kr">const</span> <span class="nx">ConnectedApp</span> <span class="o">=</span> <span class="nx">connect</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">state</span>: <span class="kt">ApplicationState</span><span class="p">)</span><span class="o">:</span> <span class="nx">StateProps</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="nx">currentTime</span>: <span class="kt">state.currentTime</span>
  <span class="p">}),</span>
  <span class="p">(</span><span class="nx">dispatch</span>: <span class="kt">Dispatch</span><span class="p">)</span><span class="o">:</span> <span class="nx">DispatchProps</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="nx">getTime</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">({</span> <span class="nx">type</span>: <span class="kt">Actions.GetTime</span> <span class="p">})</span>
  <span class="p">})</span>
<span class="p">)(</span><span class="nx">App</span><span class="p">);</span></code></pre></div>
<p>The <a href="https://react-redux.js.org/api/connect" target="_blank">connect()</a> function is the key piece of react-redux api. It accepts multiple params, but for our use case we need the first two: mapStateToProps and mapDispatchToProps. <code>mapStateToProps</code> is the function mapping the application state to component properties, while <code>mapDispatchToProps</code> maps action calls to the same component properties. Note how each of these two functions is typed using previously defined interfaces (StateProps and DispatchProps).</p></li>

<li><p>Now that we have a connected App component, we have to make sure it is exported with a redux store instance. To do that, we&rsquo;ll define a <code>makeApp()</code> function:</p>
<div class="highlight"><pre class="chroma"><code class="language-jsx" data-lang="jsx"><span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;react-redux&#34;</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">createStore</span> <span class="nx">from</span> <span class="s2">&#34;./store&#34;</span><span class="p">;</span>
    
<span class="k">const</span> <span class="nx">makeApp</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">();</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">Provider</span> <span class="na">store</span><span class="o">=</span><span class="s">{store}</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">ConnectedApp</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">Provider</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">makeApp</span><span class="p">;</span></code></pre></div></li>

<li><p>And last step is to update the <code>index.js</code> file. Instead of using directly <code>App</code> component, it will use <code>makeApp()</code> function instead:</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="k">import</span> <span class="p">{</span> <span class="nx">AppRegistry</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;react-native&#34;</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">makeApp</span> <span class="nx">from</span> <span class="s2">&#34;./App&#34;</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">name</span> <span class="nx">as</span> <span class="nx">appName</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./app.json&#34;</span><span class="p">;</span>

<span class="nx">AppRegistry</span><span class="p">.</span><span class="nx">registerComponent</span><span class="p">(</span><span class="nx">appName</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">makeApp</span><span class="p">);</span>
</code></pre></div></li>
</ol>

<p>If all went well, then the app&rsquo;s button should now work:</p>

<p><a href="/posts/typescript-react-native/2.png"><img src="/posts/typescript-react-native/2.small.png" alt="React Native Hello World" /></a></p>

<h2 id="use-thunks">Use thunks</h2>

<p>A thought may have crossed your mind that we&rsquo;ve gone through awful lot of trouble to get the current time into the App view. Indeed we have, but in doing so we&rsquo;ve managed to separate application state from react component, which is a good thing to do to keep you sane as your react application grows to many screens and components.</p>

<p>Similarly, adding thunk middleware may seem as a very round-about way of doing delayed or async actions. Why do we want to complicate our life with thunks, if having <code>somethingAsync().then(...)</code> in <code>mapDispatchToProps()</code> already does the job? The reason you&rsquo;d want to use a middleware like thunks is to separate concerns and avoid repetition. Component should not care about implementation details of specific actions, like knowing which is async and which not. But read this great <a href="http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559" target="_blank">explanation</a> by Dan Abramov - he explains is better than I ever could.</p>

<p>First thing to start with thunks is to add the dependency:</p>

<pre><code>yarn add redux-thunk
</code></pre>

<p>It already contains types, so we don&rsquo;t have to add a separate <code>@types/redux-thunk</code> dependency.</p>

<p>Next, let&rsquo;s add another button which will fetch and show <a href="https://theysaidso.com/quote-of-the-day/" target="_blank">random quote of the day</a>. To complicate things a bit, we&rsquo;ll also fetch <a href="http:///wttr.in" target="_blank">current weather</a>. And we want to implement it in such way that the App component isn&rsquo;t aware of actual actions implementation. Async or not, serial or parallel, the App component shouldn&rsquo;t care.</p>

<p>We&rsquo;ll begin by creating two files, <code>actions.ts</code> and <code>types.ts</code>, in order to have cleaner code. Let&rsquo;s start with <code>types.ts</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-ts" data-lang="ts"><span class="kr">import</span> <span class="p">{</span> <span class="nx">AnyAction</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;redux&#34;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">ThunkDispatch</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;redux-thunk&#34;</span><span class="p">;</span>

<span class="kr">export</span> <span class="kr">interface</span> <span class="nx">ApplicationState</span> <span class="p">{</span>
  <span class="nx">currentTime</span>: <span class="kt">Date</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span>
  <span class="nx">dailyQuote</span>: <span class="kt">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span>
  <span class="nx">weather</span>: <span class="kt">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span>
  <span class="nx">error</span>: <span class="kt">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="kr">enum</span> <span class="nx">ActionTypes</span> <span class="p">{</span>
  <span class="nx">GetTime</span> <span class="o">=</span> <span class="s2">&#34;GET_TIME&#34;</span><span class="p">,</span>
  <span class="nx">GetQuote</span> <span class="o">=</span> <span class="s2">&#34;GET_QUOTE&#34;</span><span class="p">,</span>
  <span class="nx">GetWeather</span> <span class="o">=</span> <span class="s2">&#34;GET_WEATHER&#34;</span><span class="p">,</span>
  <span class="nb">Error</span> <span class="o">=</span> <span class="s2">&#34;ERROR&#34;</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="nx">type</span> <span class="nx">ThunkDispatch</span> <span class="o">=</span> <span class="nx">ThunkDispatch</span><span class="o">&lt;</span><span class="nx">ApplicationState</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">AnyAction</span><span class="o">&gt;</span><span class="p">;</span></code></pre></div>
<p>The file consists of three parts:</p>

<ol>
<li>We&rsquo;ve moved the <code>ActionTypes</code> enumeration from <code>store.ts</code> and expanded it with three new items: two actions types to fetch the daily quote and current weather, and also one for errors.</li>
<li>We&rsquo;ve also moved and expanded the <code>ApplicationState</code> interface.</li>

<li><p>Finally, we&rsquo;ve added type alias for <code>ThunkDispatch</code>. The interface is defined as parametrized type within <code>redux-thunk</code> dependency:</p>
<div class="highlight"><pre class="chroma"><code class="language-ts" data-lang="ts"><span class="kr">export</span> <span class="kr">interface</span> <span class="nx">ThunkDispatch</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">,</span> <span class="nx">E</span><span class="p">,</span> <span class="nx">A</span> <span class="kr">extends</span> <span class="nx">Action</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="o">&lt;</span><span class="nx">T</span> <span class="kr">extends</span> <span class="nx">A</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">action</span>: <span class="kt">T</span><span class="p">)</span><span class="o">:</span> <span class="nx">T</span><span class="p">;</span>
  <span class="o">&lt;</span><span class="nx">R</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">asyncAction</span>: <span class="kt">ThunkAction</span><span class="o">&lt;</span><span class="nx">R</span><span class="p">,</span> <span class="nx">S</span><span class="p">,</span> <span class="nx">E</span><span class="p">,</span> <span class="nx">A</span><span class="o">&gt;</span><span class="p">)</span><span class="o">:</span> <span class="nx">R</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>The parameters are for state (S), action (A) and <a href="https://github.com/reduxjs/redux-thunk#injecting-a-custom-argument" target="_blank">extra argument</a> (E) types. For our needs, we will use our <code>ApplicationState</code>, <code>AnyAction</code> from the <code>redux</code> dependency and nothing for extra argument. Type alias will help us declutter action functions.</p></li>
</ol>

<p>Next is <code>actions.ts</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-ts" data-lang="ts"><span class="kr">import</span> <span class="p">{</span> <span class="nx">ActionTypes</span><span class="p">,</span> <span class="nx">ThunkDispatch</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./types&#34;</span><span class="p">;</span>

<span class="kr">export</span> <span class="kr">const</span> <span class="nx">getTime</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="nx">type</span>: <span class="kt">ActionTypes.GetTime</span>
<span class="p">});</span>

<span class="kr">export</span> <span class="kr">const</span> <span class="nx">getWeather</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">dispatch</span>: <span class="kt">ThunkDispatch</span><span class="p">)</span> <span class="o">=&gt;</span>
  <span class="nx">fetch</span><span class="p">(</span><span class="s2">&#34;http://wttr.in/Copenhagen?format=3&#34;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">request</span> <span class="o">=&gt;</span> <span class="nx">request</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">body</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">dispatch</span><span class="p">({</span>
        <span class="nx">type</span>: <span class="kt">ActionTypes.GetWeather</span><span class="p">,</span>
        <span class="nx">weather</span>: <span class="kt">body</span>
      <span class="p">});</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">dispatch</span><span class="p">({</span>
        <span class="nx">type</span>: <span class="kt">ActionTypes.Error</span><span class="p">,</span>
        <span class="nx">error</span>: <span class="kt">e.message</span>
      <span class="p">});</span>
    <span class="p">});</span>
    
<span class="kr">export</span> <span class="kr">const</span> <span class="nx">getQuote</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">dispatch</span>: <span class="kt">ThunkDispatch</span><span class="p">)</span> <span class="o">=&gt;</span>
  <span class="nx">fetch</span><span class="p">(</span><span class="s2">&#34;http://quotes.rest/qod&#34;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">request</span> <span class="o">=&gt;</span> <span class="nx">request</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">body</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="p">[</span><span class="nx">quote</span><span class="p">]</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nx">contents</span><span class="p">.</span><span class="nx">quotes</span><span class="p">;</span>
      <span class="nx">dispatch</span><span class="p">({</span>
        <span class="nx">type</span>: <span class="kt">ActionTypes.GetQuote</span><span class="p">,</span>
        <span class="nx">quote</span><span class="o">:</span> <span class="p">{</span> <span class="nx">message</span>: <span class="kt">quote.quote</span><span class="p">,</span> <span class="nx">author</span>: <span class="kt">quote.author</span> <span class="p">}</span>
      <span class="p">});</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">getWeather</span><span class="p">()))</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">dispatch</span><span class="p">({</span>
        <span class="nx">type</span>: <span class="kt">ActionTypes.Error</span><span class="p">,</span>
        <span class="nx">error</span>: <span class="kt">e.message</span>
      <span class="p">});</span>
    <span class="p">});</span></code></pre></div>
<p>We have three actions:</p>

<ol>
<li><code>getTime()</code>, which is a simple redux action. The thunk middleware is not picky, so it works well with non-thunk actions.</li>
<li><code>getWeather()</code>, which is a proper thunk (function that accepts dispatch parameter and returns a promise). We try to fetch from <code>http://wttr.in</code> and dispatch the result, or error in case the fetch fails.</li>
<li><code>getQuote()</code> which is very similar except that it calls <code>getWeather()</code> after it is done. This is allowed and supported  - one can dispatch actions within actions. Our approach here is serial dispatch, but we could also do it in parallel using for example <code>Promise.all()</code> construct. Again, the actual implementation is neatly tucked away in this file, so that the App component doesn&rsquo;t care how it&rsquo;s done. Imagine having many components and many actions. By splitting up the logic this way, you can use and combine actions whichever way you want.</li>
</ol>

<p>We also have to update our reducer, so let&rsquo;s look at updated <code>store.ts</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-ts" data-lang="ts"><span class="kr">import</span> <span class="p">{</span> <span class="nx">applyMiddleware</span><span class="p">,</span> <span class="nx">Reducer</span><span class="p">,</span> <span class="nx">createStore</span><span class="p">,</span> <span class="nx">Store</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;redux&#34;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">thunkMiddleware</span> <span class="nx">from</span> <span class="s2">&#34;redux-thunk&#34;</span><span class="p">;</span>

<span class="kr">import</span> <span class="p">{</span> <span class="nx">ActionTypes</span><span class="p">,</span> <span class="nx">ApplicationState</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./types&#34;</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">initialState</span>: <span class="kt">ApplicationState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">currentTime</span>: <span class="kt">null</span><span class="p">,</span>
  <span class="nx">dailyQuote</span>: <span class="kt">null</span><span class="p">,</span>
  <span class="nx">weather</span>: <span class="kt">null</span><span class="p">,</span>
  <span class="nx">error</span>: <span class="kt">null</span>
<span class="p">};</span>

<span class="kr">const</span> <span class="nx">reducer</span>: <span class="kt">Reducer</span><span class="o">&lt;</span><span class="nx">ApplicationState</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">ActionTypes.GetTime</span>:
      <span class="kt">return</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
        <span class="nx">currentTime</span>: <span class="kt">new</span> <span class="nb">Date</span><span class="p">(),</span>
        <span class="nx">error</span>: <span class="kt">null</span>
      <span class="p">};</span>
    <span class="k">case</span> <span class="nx">ActionTypes.GetQuote</span>:
      <span class="kt">const</span> <span class="p">{</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">author</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">quote</span><span class="p">;</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
        <span class="nx">dailyQuote</span><span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">message</span><span class="si">}</span><span class="sb"> - </span><span class="si">${</span><span class="nx">author</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span>
        <span class="nx">error</span>: <span class="kt">null</span>
      <span class="p">};</span>
    <span class="k">case</span> <span class="nx">ActionTypes.GetWeather</span>:
      <span class="kt">return</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
        <span class="nx">weather</span>: <span class="kt">action.weather</span><span class="p">,</span>
        <span class="nx">error</span>: <span class="kt">null</span>
      <span class="p">};</span>
    <span class="k">case</span> <span class="nx">ActionTypes.Error</span>:
      <span class="kt">return</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">initialState</span><span class="p">,</span>
        <span class="nx">error</span>: <span class="kt">action.error</span>
      <span class="p">};</span>
    <span class="k">default</span><span class="o">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kr">export</span> <span class="k">default</span> <span class="p">()</span><span class="o">:</span> <span class="nx">Store</span><span class="o">&lt;</span><span class="nx">ApplicationState</span><span class="o">&gt;</span> <span class="o">=&gt;</span>
  <span class="nx">createStore</span><span class="p">(</span><span class="nx">reducer</span><span class="p">,</span> <span class="nx">applyMiddleware</span><span class="p">(</span><span class="nx">thunkMiddleware</span><span class="p">));</span></code></pre></div>
<p>Reducer is nothing fancy, we&rsquo;ve just added handling of two new action types as well as error action type. We&rsquo;ve also updated the <code>createStore()</code> call to apply the thunk middleware.</p>

<p>Last step is to update the App component:</p>
<div class="highlight"><pre class="chroma"><code class="language-jsx" data-lang="jsx"><span class="k">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">actions</span> <span class="nx">from</span> <span class="s2">&#34;./actions&#34;</span><span class="p">;</span>

<span class="k">class</span> <span class="nx">App</span> <span class="k">extends</span> <span class="nx">Component</span><span class="p">&lt;</span><span class="nt">Props</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">const</span> <span class="p">{</span>
      <span class="nx">currentTime</span><span class="p">,</span>
      <span class="nx">dailyQuote</span><span class="p">,</span>
      <span class="nx">weather</span><span class="p">,</span>
      <span class="nx">error</span><span class="p">,</span>
      <span class="nx">getQuote</span><span class="p">,</span>
      <span class="nx">getTime</span>
    <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>

    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">View</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.container}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.welcome}</span><span class="p">&gt;</span><span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">React</span> <span class="nx">Native</span><span class="o">!</span><span class="p">&lt;/</span><span class="nt">Text</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.instructions}</span><span class="p">&gt;</span><span class="nx">To</span> <span class="nx">get</span> <span class="nx">started</span><span class="p">,</span> <span class="nx">edit</span> <span class="nx">App</span><span class="p">.</span><span class="nx">tsx</span><span class="p">&lt;/</span><span class="nt">Text</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.instructions}</span><span class="p">&gt;{</span><span class="nx">instructions</span><span class="p">}&lt;/</span><span class="nt">Text</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">View</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.buttons}</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">TouchableOpacity</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.button}</span> <span class="na">onPress</span><span class="o">=</span><span class="s">{getTime}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.buttonText}</span><span class="p">&gt;</span><span class="nx">Get</span> <span class="nx">time</span><span class="p">&lt;/</span><span class="nt">Text</span><span class="p">&gt;</span>
          <span class="p">&lt;/</span><span class="nt">TouchableOpacity</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">TouchableOpacity</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.button}</span> <span class="na">onPress</span><span class="o">=</span><span class="s">{getQuote}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.buttonText}</span><span class="p">&gt;</span><span class="nx">Get</span> <span class="nx">quote</span> <span class="nx">and</span> <span class="nx">weather</span><span class="p">&lt;/</span><span class="nt">Text</span><span class="p">&gt;</span>
          <span class="p">&lt;/</span><span class="nt">TouchableOpacity</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">View</span><span class="p">&gt;</span>
        <span class="p">{</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.error}</span><span class="p">&gt;{</span><span class="nx">error</span><span class="p">}&lt;/</span><span class="nt">Text</span><span class="p">&gt;}</span>
        <span class="p">{</span><span class="nx">currentTime</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
          <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.welcome}</span><span class="p">&gt;{</span><span class="nx">currentTime</span><span class="p">.</span><span class="nx">toTimeString</span><span class="p">()}&lt;/</span><span class="nt">Text</span><span class="p">&gt;</span>
        <span class="p">)}</span>
        <span class="p">{</span><span class="nx">dailyQuote</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.welcome}</span><span class="p">&gt;{</span><span class="nx">dailyQuote</span><span class="p">}&lt;/</span><span class="nt">Text</span><span class="p">&gt;}</span>
        <span class="p">{</span><span class="nx">weather</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nt">Text</span> <span class="na">style</span><span class="o">=</span><span class="s">{styles.welcome}</span><span class="p">&gt;{</span><span class="nx">weather</span><span class="p">}&lt;/</span><span class="nt">Text</span><span class="p">&gt;}</span>
      <span class="p">&lt;/</span><span class="nt">View</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="k">const</span> <span class="nx">ConnectedApp</span> <span class="o">=</span> <span class="nx">connect</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">state</span><span class="o">:</span> <span class="nx">ApplicationState</span><span class="p">)</span><span class="o">:</span> <span class="nx">StateProps</span> <span class="p">=&gt;</span> <span class="p">({</span>
    <span class="nx">currentTime</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">currentTime</span><span class="p">,</span>
    <span class="nx">dailyQuote</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">dailyQuote</span><span class="p">,</span>
    <span class="nx">weather</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">weather</span><span class="p">,</span>
    <span class="nx">error</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">error</span>
  <span class="p">}),</span>
  <span class="p">{</span>
    <span class="nx">getTime</span><span class="o">:</span> <span class="nx">actions</span><span class="p">.</span><span class="nx">getTime</span><span class="p">,</span>
    <span class="nx">getQuote</span><span class="o">:</span> <span class="nx">actions</span><span class="p">.</span><span class="nx">getQuote</span>
  <span class="p">}</span>
<span class="p">)(</span><span class="nx">App</span><span class="p">);</span></code></pre></div>
<p>We&rsquo;ve added the button as well as rendering of the quote and the weather. The interesting bit is in the <code>connect()</code> function. Note how the component doesn&rsquo;t care anymore about specific action types. Even more: because our actions are functions that accept <code>dispatch</code> parameter (and we&rsquo;re using thunk middleware), we can just pass them to <code>connect()</code> as object literal.</p>

<h2 id="final-result">Final result</h2>

<p>Whew, that was some work. Here&rsquo;s the final result when clicking on the &lsquo;Get quote and weather&rsquo; button (this time using iOS simulator):</p>

<p><a href="/posts/typescript-react-native/3.png"><img src="/posts/typescript-react-native/3.small.png" alt="React Native Hello World" /></a></p>

<p>To finish it off, here&rsquo;s the <a href="https://github.com/jangnezda/ReactNativeRedux" target="_blank">Github repo</a> of this project. Happy hacking!</p>
]]></content>
		</item>
		
	</channel>
</rss>
