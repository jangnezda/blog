<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rebased</title>
    <link>https://blog.rebased.dev/</link>
    <description>Recent content on rebased</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Nov 2021 08:11:06 +0100</lastBuildDate><atom:link href="https://blog.rebased.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Electron uninstaller for macOS</title>
      <link>https://blog.rebased.dev/posts/electron-macos-uninstall/</link>
      <pubDate>Sun, 21 Nov 2021 08:11:06 +0100</pubDate>
      
      <guid>https://blog.rebased.dev/posts/electron-macos-uninstall/</guid>
      <description>Recently I was working on an Electron app that needed to work with system audio and for MacOS the authors have opted to use BlackHole audio driver. The app was already in development for some time and already used in production. But there was a problem: when user deleted the app, the audio driver wasn&amp;rsquo;t deleted from the system.
The problem is that during installation the app installed audio driver files into /Library/Audio/Plug-Ins/HAL.</description>
    </item>
    
    <item>
      <title>Upgrading Phoenix projects to latest Elixir</title>
      <link>https://blog.rebased.dev/posts/upgrade-elixir-1.9/</link>
      <pubDate>Thu, 08 Aug 2019 18:53:37 +0200</pubDate>
      
      <guid>https://blog.rebased.dev/posts/upgrade-elixir-1.9/</guid>
      <description>Elixir 1.9 has been released about a month ago. This release is important, because of two things:
  It adds releases functionality to the core. This means that Elixir projects no longer need to depend on Distillery.
  According to authors, there are no plans for new features to the language:
 As mentioned earlier, releases was the last planned feature for Elixir. We donâ€™t have any major user-facing feature in the works nor planned.</description>
    </item>
    
    <item>
      <title>Using Jenkins Shared Libraries</title>
      <link>https://blog.rebased.dev/posts/jenkins-shared-libraries/</link>
      <pubDate>Sat, 15 Jun 2019 19:57:50 +0200</pubDate>
      
      <guid>https://blog.rebased.dev/posts/jenkins-shared-libraries/</guid>
      <description>In recent months I&amp;rsquo;ve worked on multiple different projects that had to be setup for continuous integration and delivery with Jenkins. The projects share similar broad patterns of what needs to be done in CI, i.e. all of them have build and test phase, as well as deployment to kubernetes cluster. However, the projects also have differences: some of them are in Phoenix/Elixir, others in React/Typescript. As such, the Jenkinsfile in each of the projects was similar, but not the same.</description>
    </item>
    
    <item>
      <title>Simple Recurring Jobs in Phoenix Apps</title>
      <link>https://blog.rebased.dev/posts/phoenix-recurring-job/</link>
      <pubDate>Fri, 03 May 2019 19:18:44 +0200</pubDate>
      
      <guid>https://blog.rebased.dev/posts/phoenix-recurring-job/</guid>
      <description>There is often a need to do some work repeatedly in any non-trivial application. Maybe send a daily report or purge unused resources. Let&amp;rsquo;s see how we can do that in a Phoenix app.
It&amp;rsquo;s all Erlang underneath It is pretty straightforward to do recurring jobs due to Elixir being a language that targets Erlang VM and therefore has access to lightweight concurrency with supervisors and child processes. In fact, let&amp;rsquo;s check the application.</description>
    </item>
    
    <item>
      <title>Custom Session Store in Phoenix App</title>
      <link>https://blog.rebased.dev/posts/phoenix-custom-session-store/</link>
      <pubDate>Fri, 05 Apr 2019 19:56:59 +0200</pubDate>
      
      <guid>https://blog.rebased.dev/posts/phoenix-custom-session-store/</guid>
      <description>In this post I&amp;rsquo;ll show you how to build a custom session store in a Phoenix-based app. It&amp;rsquo;s super easy!
The Phoenix framework is one of the most popular web frameworks in Elixir community. In fact, I and many other developers have been introduced to Elixir through a Phoenix app. One of the great things about Phoenix is that it&amp;rsquo;s not opinionated framework - it provides sensible defaults, but may be changed or extended easily.</description>
    </item>
    
    <item>
      <title>Preloading data for React components</title>
      <link>https://blog.rebased.dev/posts/react-preload-data/</link>
      <pubDate>Tue, 12 Mar 2019 22:21:59 +0100</pubDate>
      
      <guid>https://blog.rebased.dev/posts/react-preload-data/</guid>
      <description>For every non-trivial web application there is a need to preload some data before rendering the content. For example, to display a list of users we need to fetch it first from the server. React web applications are no exception, so let&amp;rsquo;s take a look how we can preload some data in React components.
React documentation I always check the documentation first when exploring how to do something with React. There are hints and recommendations on how to do (or not do) things in React applications.</description>
    </item>
    
    <item>
      <title>React Native with Typescript</title>
      <link>https://blog.rebased.dev/posts/typescript-react-native/</link>
      <pubDate>Tue, 22 Jan 2019 21:26:10 +0100</pubDate>
      
      <guid>https://blog.rebased.dev/posts/typescript-react-native/</guid>
      <description>In this post I will describe how to setup a simple Typescript project for React Native app with Redux and Thunks. All of these tools are widely used, thouroughly documented, open source and with very active communities, but despite that it may be a challenge to wire them up correctly. Especially if you are just starting with Typescript.
There are three main reasons it can be difficult to set up a React Native project with Typescript:</description>
    </item>
    
  </channel>
</rss>
