<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rebased</title>
    <link>https://blog.rebased.dev/</link>
    <description>Recent content on rebased</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 May 2019 19:18:44 +0200</lastBuildDate>
    
	<atom:link href="https://blog.rebased.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple Recurring Jobs in Phoenix Apps</title>
      <link>https://blog.rebased.dev/posts/phoenix-recurring-job/</link>
      <pubDate>Fri, 03 May 2019 19:18:44 +0200</pubDate>
      
      <guid>https://blog.rebased.dev/posts/phoenix-recurring-job/</guid>
      <description>There is often a need to do some work repeatedly in any non-trivial application. Maybe send a daily report or purge unused resources. Let&amp;rsquo;s see how we can do that in a Phoenix app.
It&amp;rsquo;s all Erlang underneath It is pretty straightforward to do recurring jobs due to Elixir being a language that targets Erlang VM and therefore has access to lightweight concurrency with supervisors and child processes. In fact, let&amp;rsquo;s check the application.</description>
    </item>
    
    <item>
      <title>Custom Session Store in Phoenix App</title>
      <link>https://blog.rebased.dev/posts/phoenix-custom-session-store/</link>
      <pubDate>Fri, 05 Apr 2019 19:56:59 +0200</pubDate>
      
      <guid>https://blog.rebased.dev/posts/phoenix-custom-session-store/</guid>
      <description>In this post I&amp;rsquo;ll show you how to build a custom session store in a Phoenix-based app. It&amp;rsquo;s super easy!
The Phoenix framework is one of the most popular web frameworks in Elixir community. In fact, I and many other developers have been introduced to Elixir through a Phoenix app. One of the great things about Phoenix is that it&amp;rsquo;s not opinionated framework - it provides sensible defaults, but may be changed or extended easily.</description>
    </item>
    
    <item>
      <title>Preloading data for React components</title>
      <link>https://blog.rebased.dev/posts/react-preload-data/</link>
      <pubDate>Tue, 12 Mar 2019 22:21:59 +0100</pubDate>
      
      <guid>https://blog.rebased.dev/posts/react-preload-data/</guid>
      <description>For every non-trivial web application there is a need to preload some data before rendering the content. For example, to display a list of users we need to fetch it first from the server. React web applications are no exception, so let&amp;rsquo;s take a look how we can preload some data in React components.
React documentation I always check the documentation first when exploring how to do something with React.</description>
    </item>
    
    <item>
      <title>React Native with Typescript</title>
      <link>https://blog.rebased.dev/posts/typescript-react-native/</link>
      <pubDate>Tue, 22 Jan 2019 21:26:10 +0100</pubDate>
      
      <guid>https://blog.rebased.dev/posts/typescript-react-native/</guid>
      <description>In this post I will describe how to setup a simple Typescript project for React Native app with Redux and Thunks. All of these tools are widely used, thouroughly documented, open source and with very active communities, but despite that it may be a challenge to wire them up correctly. Especially if you are just starting with Typescript.
There are three main reasons it can be difficult to set up a React Native project with Typescript:</description>
    </item>
    
  </channel>
</rss>